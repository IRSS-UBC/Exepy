@echo off
setlocal

REM -----------------------------------------------------------------------------
REM run.bat
REM This batch file is auto-generated by the installer to run the Python script using the specified Python executable.
REM The following variables are set by the installer:
REM   {{PYTHON_EXE}}   - Absolute path to the Python executable.
REM   {{MAIN_SCRIPT}}  - Absolute path to the main Python script.
REM   {{SCRIPTS_DIR}}  - Absolute path to the scripts directory.
REM -----------------------------------------------------------------------------

REM Convert the placeholders to absolute paths (if they are relative).
FOR %%I in ("{{PYTHON_EXE}}") DO set "PYTHON_EXE=%%~fI"
FOR %%I in ("{{MAIN_SCRIPT}}") DO set "MAIN_SCRIPT=%%~fI"
FOR %%I in ("{{SCRIPTS_DIR}}") DO set "SCRIPTS_DIR=%%~fI"

REM Check if the Python executable exists.
if not exist "%PYTHON_EXE%" (
    echo Error: Python executable not found: "%PYTHON_EXE%"
    exit /b 1
)

REM Check if the main Python script exists.
if not exist "%MAIN_SCRIPT%" (
    echo Error: Main Python script not found: "%MAIN_SCRIPT%"
    exit /b 1
)

REM Convert backslashes to forward slashes for Python compatibility.
set "SCRIPTS_DIR_MOD=%SCRIPTS_DIR:\=/%"
set "MAIN_SCRIPT_MOD=%MAIN_SCRIPT:\=/%"

REM Set the PYTHONPATH environment variable.
set "PYTHONPATH=%SCRIPTS_DIR%"

REM Construct the inline Python code as a single line.
REM This code does the following:
REM   1. Adjusts sys.path to include the scripts directory.
REM   2. Reassigns sys.argv so that sys.argv[0] becomes MAIN_SCRIPT_MOD and
REM      the remaining arguments are passed from the batch file.
REM   3. Reads and compiles the main script, setting __file__ and __name__.
set "PY_CODE=import sys; sys.path.insert(0, '%SCRIPTS_DIR_MOD%'); sys.argv = ['%MAIN_SCRIPT_MOD%'] + sys.argv[1:]; f = open('%MAIN_SCRIPT_MOD%', 'r'); code = f.read(); f.close(); globals_dict = {'__file__': '%MAIN_SCRIPT_MOD%', '__name__': '__main__'}; exec(compile(code, '%MAIN_SCRIPT_MOD%', 'exec'), globals_dict)"

REM Execute the Python command and pass all additional arguments.
"%PYTHON_EXE%" -c "%PY_CODE%" %*
set "PY_EXIT_CODE=%ERRORLEVEL%"

if %PY_EXIT_CODE% neq 0 (
    echo Error: Python script execution failed with exit code %PY_EXIT_CODE%.
)

REM End the local environment and preserve the exit code.
endlocal & set "EXIT_CODE=%PY_EXIT_CODE%"
exit /b %EXIT_CODE%

